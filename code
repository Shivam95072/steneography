import cv2
import numpy as np
import argparse

def encode_message(image_path, message, output_path):
    img = cv2.imread(image_path)
    binary_message = ''.join(format(ord(char), '08b') for char in message) + '1111111111111110'  # End delimiter
    
    data_index = 0
    for row in img:
        for pixel in row:
            for i in range(3):  # Loop over RGB channels
                if data_index < len(binary_message):
                    pixel[i] = (pixel[i] & 254) | int(binary_message[data_index])
                    data_index += 1
                else:
                    break
    
    cv2.imwrite(output_path, img)
    print(f'[+] Secret message encoded into {output_path}')

def decode_message(image_path):
    img = cv2.imread(image_path)
    binary_message = ''
    
    for row in img:
        for pixel in row:
            for i in range(3):
                binary_message += str(pixel[i] & 1)
    
    binary_chars = [binary_message[i:i+8] for i in range(0, len(binary_message), 8)]
    message = ''.join(chr(int(b, 2)) for b in binary_chars if int(b, 2) != 254)  # Stop at delimiter
    
    print(f'[+] Extracted Message: "{message}"')
    return message

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--mode", choices=['encode', 'decode'], required=True, help="Choose encode or decode mode")
    parser.add_argument("--image", required=True, help="Path to input image")
    parser.add_argument("--message", help="Message to encode (required for encoding)")
    parser.add_argument("--output", help="Path to save output image (required for encoding)")
    args = parser.parse_args()

    if args.mode == "encode":
        if not args.message or not args.output:
            print("[!] Encoding requires --message and --output parameters")
        else:
            encode_message(args.image, args.message, args.output)
    elif args.mode == "decode":
        decode_message(args.image)
